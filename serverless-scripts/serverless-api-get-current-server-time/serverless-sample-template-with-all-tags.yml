# Template is for reference only, Its not tested, probably won't even work

service: service-name
tenant: ac360 # Enter your tenant name here
app: enterprise # Enter your application name here

provider:
  name: aws
  stackName: ${file(env.configs.yml):feature}-${file(env.configs.yml):environment}
  region: us-east-1
  runtime: nodejs8.10
  endpointType: regional
  accountId: ${file(env.configs.yml):accountId}
  stage: dev
  role: LambdaRole
  profile: dev-fii
  usagePlan:
    quota:
      limit: 100
      offset: 2
      period: MONTH
    throttle:
      burstLimit: 100
      rateLimit: 50
  memorySize: 256
  # credentials: ${secrets:aws-enterprise} # Enter an AWS Secret like this, after you create it in the Dashboard.
  environment:
    DYNAMODB_TABLE: ${self:service}-${self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:UpdateItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

frameworkVersion: ">=1.5.0 <2.0.0"

# remember to run npm install to download the provider plugin.        
plugins:
  - serverless-offline
  - serverless-plugin-chrome
  - serverless-plugin-optimize
  - serverless-babel-plugin
  - serverless-secrets-plugin
  - serverless-webpack
  - serverless-openwhisk
  - serverless-plugin-scripts
  - serverless-kubeless
  - serverless-hooks-plugin
  - serverless-python-requirements
  - serverless-apigw-binary
  - serverless-domain-manager
  - serverless-single-page-app-plugin
  - serverless-cf-vars

custom:
  serverless-offline:
    port: 9999
    host: 0.0.0.0
    babelOptions:
      presets: ["es2015", "latest"]
  optimize:
    minify: true
  stages:
    - ${opt:stage}
    - dev
    - integration
    - production

package:
  artifact: build/distributions/aws-java-simple-http-endpoint.zip
  exclude:
    - node_modules/puppeteer/.local-chromium/**
    - layer/**
    - node_modules/**
    - .gitignore
    - .git/**
    - '!node_modules/babel-runtime/**'
    - '!node_modules/sharp/**'
    - ./**
  include:
    - ./bin/**
  individually: true

functions:
  # Function name
  forward-call:
    # Path to the JS handler function in the project (without file extension '.js')
    handler: forward-call
    # URL path of the function after deployment
    path: /forward-call
    # visibility of the function (can be "public" or "protected")
    access: public
  auth:
    handler: handler.auth
    cors: true
    runtime: nodejs6.10
  create:
    name: ${self:custom.stack_name}-bucket
    description: Generate a presigned URL for PUT upload
    handler: todos/create.create
    memorySize: 1536MB
    timeout: 30
    runtime: python3.6
    events:
      - schedule: cron(* * * * *)
      - schedule: '* * * * *'
      # Invoke Lambda function every minute
      - schedule: rate(1 minute)
      - schedule: rate(5 hours)
      # Invoke Lambda function every 2nd minute from Mon-Fri
      - schedule: cron(0/2 * ? * MON-FRI *)
      - trigger: event_name
      - http:
          path: todos
          method: post
          integration: lambda
          request:
            parameter:
              paths:
                name: true
          # OR -------------------
          request:
            parameters:
              querystrings:
                name: true
          cors: true
          # OR -------------------
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
          # See custom authorizer docs here: http://bit.ly/2gXw9pO
          authorizer: auth
          # OR -----------------
          authorizer:
            name: auth
            resultTtlInSeconds: 0
      - http: GET hello
      - s3: ${self:custom.bucket}
      - s3:
          bucket: ${self:custom.s3_bucket}
          event: s3:ObjectRemoved:*
          rules:
            - prefix: ${self:custom.s3_key_base}
            - suffix: .png
      - iot:
          sql: "SELECT * FROM 'mybutton'"
      - http:
          path: todos/{todo_id}
          method: put
          cors: true
          integration: lambda
          request:
            paths:
              todo_id: true
              parameters:
                paths:
                  timeout: true
      - alexaSkill
      - stream:
          type: kinesis
          arn: arn:aws:kinesis:<region>:<accountID>:stream/<streamname>
          batchSize: 100
          startingPosition: TRIM_HORIZON
          enabled: true
      - stream:
          type: dynamodb
          batchSize: 100
          enabled: true
          arn: { "Fn::GetAtt": ["PuppyDemo", "StreamArn"] }
      - websocket:
          route: $connect # authorizers are only for connect routes
          authorizer:
            name: auth
            identitySource:
              - 'route.request.header.Auth'
      - websocket:
          route: $default
    layers:
      - {Ref: FfmpegLambdaLayer}
    sequence:
      - split
      - reverse
      - join
    parameters: 
      jq: '.results[0].geometry.location'
    environment:
      # Provide your bucket name here
      BUCKET: dynamic-image-resizing
      REGION: us-east-1
    # layers:
    #   - {Ref: ImageLibsLambdaLayer}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "s3:GetObject"
        Resource: "arn:aws:s3:::dynamic-image-resizing/*"
      - Effect: "Allow"
        Action:
          - "s3:PutObject"
        Resource: "arn:aws:s3:::dynamic-image-resizing/*"

layers:
  ffmpeg:
    path: layer

resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          - AttributeName: name
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
          - AttributeName: name
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}

    PuppySearch:
      Type: "AWS::Elasticsearch::Domain"
      Properties:
        ElasticsearchVersion: "6.3"
        DomainName: "puppy-search"
        ElasticsearchClusterConfig:
          DedicatedMasterEnabled: false
          InstanceCount: "1"
          ZoneAwarenessEnabled: false
          InstanceType: "t2.small.elasticsearch"
        EBSOptions:
          EBSEnabled: true
          Iops: 0
          VolumeSize: 10
          VolumeType: "gp2"

        ## Attention! Before you enable this lines, check out the README to avoid an open access policy
        # AccessPolicies:
        #   Version: "2012-10-17"
        #   Statement:
        #     -
        #       Effect: "Allow"
        #       Principal:
        #         AWS: "*"
        #       Action: "es:*"
        #       Resource: "*"
        AdvancedOptions:
          rest.action.multi.allow_explicit_index: "true"
    # This response is needed for custom authorizer failures cors support ¯\_(ツ)_/¯
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
        ## Specifying the S3 Bucket
    WebAppS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3Bucket}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "Authorization"
              AllowedMethods:
                - GET
              AllowedOrigins:
                - "*"
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - PUT
              AllowedOrigins:
                - "*"
    ## Specifying the policies to make sure all files inside the Bucket are avaialble to CloudFront
    WebAppS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: WebAppS3Bucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
              - s3:GetObject
              Resource: arn:aws:s3:::${self:custom.s3Bucket}/*
    ## Specifying the CloudFront Distribution to server your Web Application
    WebAppCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: ${self:custom.s3Bucket}.s3.amazonaws.com
              ## An identifier for the origin which must be unique within the distribution
              Id: WebApp
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: https-only
              ## In case you want to restrict the bucket access use S3OriginConfig and remove CustomOriginConfig
              # S3OriginConfig:
              #   OriginAccessIdentity: origin-access-identity/cloudfront/E127EXAMPLE51Z
          Enabled: 'true'
          ## Uncomment the following section in case you are using a custom domain
          # Aliases:
          # - mysite.example.com
          DefaultRootObject: index.html
          ## Since the Single Page App is taking care of the routing we need to make sure ever path is served with index.html
          ## The only exception are files that actually exist e.h. app.js, reset.css
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            ## The origin id defined above
            TargetOriginId: WebApp
            ## Defining if and how the QueryString and Cookies are forwarded to the origin which in this case is S3
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ## The protocol that users can use to access the files in the origin. To allow HTTP use `allow-all`
            ViewerProtocolPolicy: redirect-to-https
          ## The certificate to use when viewers use HTTPS to request objects.
          ViewerCertificate:
            CloudFrontDefaultCertificate: 'true'
          ## Uncomment the following section in case you want to enable logging for CloudFront requests
          # Logging:
          #   IncludeCookies: 'false'
          #   Bucket: mylogs.s3.amazonaws.com
          #   Prefix: myprefix

    SharedGW:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: SharedGW
    GiveSESPermissionToInvokeProcessacceptrejectLambdaFunction:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: { "Fn::GetAtt": [ "ProcessacceptrejectLambdaFunction", "Arn" ] }
        Principal: ses.amazonaws.com
        Action: 'lambda:InvokeFunction'
        SourceAccount: { Ref: AWS::AccountId }
    LambdaRole: ${file(./resource/LambdaRole.yml)}
    ServerlessInternetGateway: ${file(./resource/ServerlessInternetGateway.yml)}
    ServerlessVPC: ${file(./resource/ServerlessVPC.yml)}
    ServerlessVPCGA: ${file(./resource/ServerlessVPCGA.yml)}
    ServerlessSubnetA: ${file(./resource/ServerlessSubnetA.yml)}
    ServerlessSubnetB: ${file(./resource/ServerlessSubnetB.yml)}
    ServerlessSubnetC: ${file(./resource/ServerlessSubnetC.yml)}
    ServerlessSubnetGroup: ${file(./resource/ServerlessSubnetGroup.yml)}
    ServerlessSecurityGroup: ${file(./resource/ServerlessSecurityGroup.yml)}
    RouteTablePublic: ${file(./resource/RouteTablePublic.yml)}
    RoutePublic: ${file(./resource/RoutePublic.yml)}
    RouteTableAssociationSubnetA: ${file(./resource/RouteTableAssociationSubnetA.yml)}
    RouteTableAssociationSubnetB: ${file(./resource/RouteTableAssociationSubnetB.yml)}
    RouteTableAssociationSubnetC: ${file(./resource/RouteTableAssociationSubnetC.yml)}

    AuroraRDSClusterParameter: ${file(./resource/AuroraRDSClusterParameter.yml)}
    AuroraRDSInstanceParameter: ${file(./resource/AuroraRDSInstanceParameter.yml)}
    AuroraRDSCluster: ${file(./resource/AuroraRDSCluster.yml)}
    AuroraRDSInstance: ${file(./resource/AuroraRDSInstance.yml)}

    MySqlRDSInstance: ${file(./resource/MySqlRDSInstance.yml)}

    PostgreSqlRDSInstance: ${file(./resource/PostgreSqlRDSInstance.yml)}
  ## In order to print out the hosted domain via `serverless info` we need to define the DomainName output for CloudFormation
  Outputs:
    WebAppCloudFrontDistributionOutput:
      Value:
        'Fn::GetAtt': [ WebAppCloudFrontDistribution, DomainName ]